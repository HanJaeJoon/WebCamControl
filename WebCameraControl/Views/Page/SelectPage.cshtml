@model WebCameraControl.Models.IndexModel

@{
    Layout = "_Layout";
}

<div id="select-style-area" class="container min-vh-100 p-5">
    <p id="pickPhoto-timer" class="text-end">Time left <span id="timer"></span>s</p>
    <span class="title w-auto me-auto mt-1">Select Style</span>
    <div class="row w-100 mb-5 mt-5 justify-content-start">
        <div id="preview-frame" class="col-auto p-0">
            <canvas id="canvas" width="2447" height="3263" style="width: 300px; height: 400px;"></canvas>
        </div>
        <div class="col-auto p-3">
            <div class="row">
                <div class="select-filter">
                    <p class="option-title">photo filter</p>
                    <div class="d-flex flex-row">
                        <div class="filter selected" data-filter="original">colored</div>
                        <div class="filter ms-2" data-filter="twenties">greyscale</div>
                        <div class="filter ms-2" data-filter="haruharu_red">vintage</div>
                    </div>
                </div>
            </div>
            <div class="row" style="height:30px;"></div>
            <div class="row">
                <div class="select-color">
                    <p class="option-title">frame color</p>
                    <div class="row">
                        <div class="color col">
                            <div id="color-white" class="frame-color selected" data-frame="frame_white.png" data-type="white"></div>
                            <div class="text-color">white</div>
                        </div>
                        <div class="color col">
                            <div id="color-black" class="frame-color" data-frame="frame_black.png"></div>
                            <div class="text-color">black</div>
                        </div>
                        <div class="color col">
                            <div id="color-gray" class="frame-color" data-frame="frame_gray.png"></div>
                            <div class="text-color">gray</div>
                        </div>
                        <div class="color col">
                            <div id="color-red" class="frame-color" data-frame="frame_red.png"></div>
                            <div class="text-color">red</div>
                        </div>
                        <div class="color col">
                            <div id="color-purple" class="frame-color" data-frame="frame_purple.png"></div>
                            <div class="text-color">purple</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="fixed-bottom px-5 pb-5 mb-5">
        <button type="button" id="btn-go-to-print" class="btn btn-lg">Go to print →</button>
    </div>
</div>

<script src="~/js/pixels.min.js"></script>
<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', () => {
        const imageWidth = 960;
        const imageHeight = 1280;
        const marginLeft = 241;
        const marginTop = 221;
        const spaceX = 46;
        const spaceY = 45;
        let loadingStatus = [false, false, false, false, false];

        const canvas = document.querySelector('#canvas');
        const context = canvas.getContext('2d', { willReadFrequently: true, });

        drawFilteredImageWithFrame();

        const filterOptions = document.querySelectorAll('.filter');
        const frameOptions = document.querySelectorAll('.frame-color');

        async function drawFilteredImageWithFrame(frameSource) {
            disableButton();

            const frame = new Image();
            frame.src = frameSource ?? `/images/frame_white.png`;
            frame.onload = () => {
                context.drawImage(frame, 0, 0, 2447, 3263);

                const filter = document.querySelector('.filter.selected')?.dataset.filter;

                if (filter === 'original') {
                    drawImages();
                } else {
                    setFilters(filter);
                }

                enableButton(0);
            };
        }

        function drawImages() {
            if (!sessionStorage.getItem('image1_src')
                || !sessionStorage.getItem('image2_src')
                || !sessionStorage.getItem('image3_src')
                || !sessionStorage.getItem('image4_src')
            ) {
                alert('시스템 오류가 발생했습니다.');
                window.location.href = '/pay';
                return;
            }

            const image1 = new Image();
            image1.src = sessionStorage.getItem('image1_src');
            image1.onload = () => {
                context.drawImage(image1, marginLeft, marginTop, imageWidth, imageHeight);
                enableButton(1);
            };

            const image2 = new Image();
            image2.src = sessionStorage.getItem('image2_src');
            image2.onload = () => {
                context.drawImage(image2, marginLeft + imageWidth + spaceX, marginTop, imageWidth, imageHeight);
                enableButton(2);
            };

            const image3 = new Image();
            image3.src = sessionStorage.getItem('image3_src');
            image3.onload = () => {
                context.drawImage(image3, marginLeft, marginTop + imageHeight + spaceY, imageWidth, imageHeight);
                enableButton(3);
            };

            const image4 = new Image();
            image4.src = sessionStorage.getItem('image4_src');
            image4.onload = () => {
                context.drawImage(image4, marginLeft + imageWidth + spaceX, marginTop + imageHeight + spaceY, imageWidth, imageHeight);
                enableButton(4);
            };
        }

        const filterList = pixelsJS.getFilterList();

        async function setFilters(filterName) {
            let index = Math.floor(Math.random() * filterList.length);
            let filter = filterName === 'random' ? filterList[index] : filterName;

            const image1 = new Image();
            image1.src = sessionStorage.getItem('image1_src');
            image1.onload = () => {
                context.drawImage(image1, marginLeft, marginTop, imageWidth, imageHeight);
                let imgData1 = context.getImageData(marginLeft, marginTop, imageWidth, imageHeight);
                let newImgData1 = pixelsJS.filterImgData(imgData1, filter);
                context.putImageData(newImgData1, marginLeft, marginTop);
                enableButton(1);
            };

            const image2 = new Image();
            image2.src = sessionStorage.getItem('image2_src');
            image2.onload = () => {
                context.drawImage(image2, marginLeft + imageWidth + spaceX, marginTop, imageWidth, imageHeight);
                let imgData2 = context.getImageData(marginLeft + imageWidth + spaceX, marginTop, imageWidth, imageHeight);
                let newImgData2 = pixelsJS.filterImgData(imgData2, filter);
                context.putImageData(newImgData2, marginLeft + imageWidth + spaceX, marginTop);
                enableButton(2);
            };

            const image3 = new Image();
            image3.src = sessionStorage.getItem('image3_src');
            image3.onload = () => {
                context.drawImage(image3, marginLeft, marginTop + imageHeight + spaceY, imageWidth, imageHeight);
                let imgData3 = context.getImageData(marginLeft, marginTop + imageHeight + spaceY, imageWidth, imageHeight);
                let newImgData3 = pixelsJS.filterImgData(imgData3, filter);
                context.putImageData(newImgData3, marginLeft, marginTop + imageHeight + spaceY);
                enableButton(3);
            };

            const image4 = new Image();
            image4.src = sessionStorage.getItem('image4_src');
            image4.onload = () => {
                context.drawImage(image4, marginLeft + imageWidth + spaceX, marginTop + imageHeight + spaceY, imageWidth, imageHeight);
                let imgData4 = context.getImageData(marginLeft + imageWidth + spaceX, marginTop + imageHeight + spaceY, imageWidth, imageHeight);
                let newImgData4 = pixelsJS.filterImgData(imgData4, filter);
                context.putImageData(newImgData4, marginLeft + imageWidth + spaceX, marginTop + imageHeight + spaceY);
                enableButton(4);
            };
        }

        [ ...filterOptions, ...frameOptions ].forEach(option => {
            option.addEventListener('click', async function () {
                disableButton();

                const isFilter = this.classList.contains('filter');
                const options = isFilter ? filterOptions : frameOptions;

                options.forEach(o => o.classList.remove('selected'));
                this.classList.add('selected');

                if (isFilter) {
                    const filter = this.dataset.filter;

                    if (filter === 'original') {
                        drawImages();
                    } else {
                        await setFilters(filter);
                    }

                    enableButton(0);
                } else {
                    // preview-frame에 흰색일때만 구분선으로 border 주기
                    if (this.dataset.type === 'white') {
                        $('#preview-frame').css('border', '0.7px solid #838383');
                    }
                    else {
                        $('#preview-frame').css('border', 'none');
                    }

                    await drawFilteredImageWithFrame(`/images/${this.dataset.frame}`);
                }
            });
        });

        function disableButton() {
            loadingStatus = [false, false, false, false, false];
            document.querySelector('#btn-go-to-print').disabled = true;
        }

        function enableButton(index) {
            loadingStatus[index] = true;

            if (loadingStatus.every(e => e)) {
                document.querySelector('#btn-go-to-print').disabled = false;
            }
        }

        document.querySelector('#btn-go-to-print').addEventListener('click', () => {
            // 필터와 프레임 적용될 동안 버튼 disable 처리
            document.querySelector('#btn-go-to-print').disabled = true;

            const base64Image = canvas.toDataURL('image/jpeg').split(';base64,')[1];
            const count = localStorage.getItem('count') ?? 1;

            fetch('/api/image/print', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    base64imageSource: base64Image,
                    count,
                }),
            })
                .then(async (response) => {
                    if (response.ok) {
                        return response.json();
                    }

                    const text = await response.text();
                    throw new Error(text);
                })
                .then((data) => {
                    window.location.href = `/printing/${data}`;
                })
                .catch((error) => {
                    alert(`에러 발생!\n${error}`);
                })
                .finally(() => {
                    document.querySelector('#btn-go-to-print').disabled = false;
                });
        });

        // 사진 선택 타이머
        // 타이머 시작
        let pickPhototimer;
        const initPickPhotoimer = (time) => {
            if (!pickPhototimer) {
                clearInterval(pickPhototimer);
            }

            pickPhototimer = setInterval(() => {
                $('#timer').text(time);
                time--;

                if (time < 0) {
                    clearInterval(pickPhototimer);

                    // 시간 초과 이후 동작
                    document.getElementById('btn-go-to-print').click();
                }

            }, 1000);
        }

        initPickPhotoimer(80);
    });
</script>
