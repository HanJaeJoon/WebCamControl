@using WebCameraControl.Core
@using WebCameraControl.Models
@using Microsoft.Extensions.Configuration

@model WebCameraControl.Models.IndexModel
@inject AppDbContext DbContext
@inject IConfiguration Configuration

@{
    Layout = "_Layout";

    AppInfo? info = DbContext.AppInfo.FirstOrDefault();
}

@if (info is not null)
{
    <div>
        버전: @info.Version.ToString() (@info.Date)
    </div>
}

<div class="d-flex flex-column min-vh-100 p-5">
    <span>original</span>
    <img id="image" alt="image: radical candor" src="" style="width: 600px; height: 400px;">
    <span id="filter">original(no filter)</span>
    <canvas id="canvas" width="600" height="400" style="width: 600px; height: 400px;"></canvas>
    <div class="form-floating my-5">
        <input type="email" id="email" class="form-control" value="@Configuration["PrinterEmail"]" disabled="disabled" />
        <label for="email">링크를 전송할 Email</label>

        <div class="d-flex flex-row mt-5">
            <div class="input-group w-50">
                <span class="input-group-text">width</span>
                <input type="text" id="width" class="form-control size-control" value="600" />
                <span class="input-group-text">px</span>
            </div>

            <div class="input-group w-50">
                <span class="input-group-text">height</span>
                <input type="text" id="height" class="form-control size-control" value="400" />
                <span class="input-group-text">px</span>
            </div>
        </div>
    </div>
    <button type="button" id="btn-send" class="btn btn-primary btn-lg">Send Email</button>
    <button type="button" id="btn-filter" class="btn btn-secondary btn-lg my-3">Set filter</button>
    <div id="qr-code-area" class="mt-5"></div>
</div>

<script src="~/js/test-data.js"></script>
<script src="~/js/qrcode.min.js"></script>
<script src="~/js/pixels.min.js"></script>
<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', () => {
        const image = document.querySelector('#image');
        image.src = 'data:image/jpeg;base64,' + testData;

        const drawImage = () => {
            const canvas = document.querySelector('#canvas');
            const context = canvas.getContext('2d');
            const width = document.querySelector('#width').value;
            const height = document.querySelector('#height').value;
            const img = new Image();

            img.src = image.src;
            img.onload = () => {
                context.drawImage(img, 0, 0, 600, 400, 0, 0, width, height);
            };
        };

        drawImage();

        const emailInput = document.querySelector('#email');
        const qrArea = document.querySelector('#qr-code-area');

        document.querySelector('#btn-send').addEventListener('click', () => {
            if (!emailInput) {
                alert(`email을 입력해주세요!`);
                return;
            }

            const sendButton = document.querySelector('#btn-send');

            sendButton.innerHTML = `
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Loading...
            `;
            sendButton.disabled = true;

            const base64Image = canvas.toDataURL('image/jpeg').split(';base64,')[1];
            const width = document.querySelector('#width').value;
            const height = document.querySelector('#height').value;

            fetch('/api/image/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    email: emailInput.value,
                    imageSource: base64Image,
                    width,
                    height,
                }),
            })
                .then(async (response) => {
                    if (response.ok) {
                        return response.json();
                    }

                    const text = await response.text();
                    throw new Error(text);
                })
                .then((data) => {
                    new QRCode(qrArea, data);
                    alert(`성공!`);
                })
                .catch((error) => {
                    alert(`에러 발생!\n${error}`);
                })
                .finally(() => {
                    sendButton.innerHTML = `Send Email`;
                    sendButton.disabled = false;
                });
        });

        const filterList = pixelsJS.getFilterList();
        const filterSpan = document.querySelector('#filter');
        const setFilter =  () => {
            const canvas = document.querySelector('#canvas');
            const context = canvas.getContext('2d');
            const width = document.querySelector('#width').value;
            const height = document.querySelector('#height').value;
            const img = new Image();

            img.src = image.src;
            img.onload = () => {

                context.drawImage(img, 0, 0, 600, 400, 0, 0, width, height);

                let imgData = context.getImageData(0, 0, width, height);
                let index = Math.floor(Math.random() * filterList.length);
                let filter = filterList[index];

                filterSpan.innerHTML = filter;

                let newImgData = pixelsJS.filterImgData(imgData, filter);

                context.putImageData(newImgData, 0, 0);
            };
        };

        document.querySelector('#btn-filter').addEventListener('click', setFilter);

        document.querySelectorAll('.size-control').forEach(element => {
            element.addEventListener('change', () => {
                const canvas = document.querySelector('#canvas');
                const width = document.querySelector('#width').value;
                const height = document.querySelector('#height').value;

                canvas.style.width = `${width}px`;
                canvas.style.height = `${height}px`;
                canvas.setAttribute('width', width);
                canvas.setAttribute('height', height);

                drawImage();
            });
        });
    });
</script>
