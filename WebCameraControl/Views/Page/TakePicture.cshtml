@using System.Diagnostics
@model WebCameraControl.Models.IndexModel

@{
    Layout = "_Layout";

    int width = Debugger.IsAttached ? 1080 : 720;
    int height = Debugger.IsAttached ? 720 : 1080;
}

<div id="take-picture-area" class="d-flex flex-column">
    <div id="camera-preview">
        <video playsinline="playsinline"></video>
    </div>

    <span id="camera-counter" class="w-auto me-auto ms-3">1/8</span>
    <span id="camera-timer" class="w-auto mx-auto">Ready?</span>
</div>
<div id="picture-list-area" class="d-flex flex-column min-vh-100 p-5">
    <span id="pick" class="w-auto me-auto mt-1">Pick 4 photos</span>
    <div class="d-flex flex-row mb-3 justify-content-center">
        <div id="img1" class="mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
        <div id="img2" class="mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
        <div id="img3" class="mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
    </div>
    <div class="d-flex flex-row mb-3 justify-content-center">
        <div id="img4" class="mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
        <div id="img5" class="mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
        <div id="img6" class="mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
    </div>
    <div class="d-flex flex-row mb-3 justify-content-center">
        <div id="img7" class="mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
        <div id="img8" class="mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
        <div class="mx-3 text-center align-self-end"  style="width: 30%; height: 30%;">
            <a id="reset" href="/" class="text-black">RESET ALL</a>
            <button type="button" id="btn-done" class="btn btn-secondary justify-content-center">
                Done
            </button>
        </div>
    </div>
</div>

<script src="~/lib/webcam/webcam.js"></script>
<script type="text/javascript">
    const variables = {
        CameraManufacturer: '@Model.CameraManufacturer',
    };

    const windowInnerWidth = window.innerWidth;
    const windowInnerHeight = window.innerHeight;

    document.addEventListener('DOMContentLoaded', async () => {
        navigator.mediaDevices?.enumerateDevices()
            .then(devices => {
                let webcamOption = null;

                for (let i = 0; i < devices.length; i++) {
                    const device = devices[i];

                    if (device?.kind !== 'videoinput') {
                        continue;
                    }

                    if (device.label?.toLowerCase()?.includes(variables.CameraManufacturer) || !webcamOption) {
                        webcamOption = {
                            width: windowInnerWidth, // @(width / 2),
                            height: windowInnerHeight, // @(height / 2),
                            image_format: 'jpeg',
                            jpeg_quality: 100,
                            deviceId: { exact: device.deviceId, },
                            flip_horiz: true,

                            // device capture size
                            dest_width: windowInnerWidth / 2,
                            dest_height: windowInnerHeight / 2,
                        };
                    }
                };

                Webcam.set(webcamOption);
                Webcam.attach('#camera-preview');
            })
            .catch(err => {
                console.log(err);
            });

        const totalCount = 8;
        const counter = document.querySelector('#camera-counter');
        const timerSpan = document.querySelector('#camera-timer');
        const pictureUriList = [];

        const renderPictures = () => {
            document.querySelector('#take-picture-area').classList.add('d-none');

            const pictureList = document.querySelector('#picture-list-area');

            for (let i = 0; i < pictureUriList.length; i++) {
                const pictureUri = pictureUriList[i];

                document.querySelector(`#img${i + 1}`).innerHTML = `
                    <img src="${pictureUri}" style="max-width: 100%;" />
                `;
            }

            pictureList.classList.remove('d-none');
        }

        let current = 1;

        const initTimer = () => {
            let seconds;
            let timer = 6;
            let interval = setInterval(() => {
                seconds = timer;

                timerSpan.innerText = timer === 6 ? 'Ready?' :
                    timer === 0 ? '📸' :
                    seconds + '!';

                if (--timer < 0) {
                    current++;

                    counter.innerText = `${current}/${totalCount}`;

                    Webcam.snap((uri) => {
                        pictureUriList.push(uri);
                    });

                    clearInterval(interval);

                    if (current >= totalCount) {
                        renderPictures();
                    } else {
                        initTimer();
                    }
                }
            }, 1_000);
        }

        initTimer();


        // 테스트 용도로 마우스 클릭시마다 사진 찍히도록 추가함. 
        document.addEventListener('click', (event) => {
            current++;

            counter.innerText = `${current}/${totalCount}`;

            Webcam.snap((uri) => {
                pictureUriList.push(uri);
            });

            if (current >= totalCount) {
                renderPictures();
            }
        });
    });
</script>
