@using System.Diagnostics
@model WebCameraControl.Models.IndexModel

@{
    Layout = "_Layout";

    int width = Debugger.IsAttached ? 1080 : 720;
    int height = Debugger.IsAttached ? 720 : 1080;
}

<div id="take-picture-area" class="d-flex flex-column">
    <div id="camera-preview">
        <video playsinline="playsinline"></video>
    </div>

    <span id="camera-counter" class="w-auto me-auto ms-3">1/8</span>
    <span id="camera-timer" class="w-auto mx-auto">Ready?</span>
</div>
<div id="picture-list-area" class="d-flex flex-column min-vh-100 p-5">
    <p id="pickPhoto-timer" class="text-end">Timer left <span id="timer"></span></p>
    <span id="pick" class="w-auto me-auto mt-1">Pick 4 photos</span>
    <div class="d-flex flex-row mb-3 justify-content-center">
        <div id="img1" class="pick-option mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
        <div id="img2" class="pick-option mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
        <div id="img3" class="pick-option mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
    </div>
    <div class="d-flex flex-row mb-3 justify-content-center">
        <div id="img4" class="pick-option mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
        <div id="img5" class="pick-option mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
        <div id="img6" class="pick-option mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
    </div>
    <div class="d-flex flex-row mb-3 justify-content-center">
        <div id="img7" class="pick-option mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
        <div id="img8" class="pick-option mx-3" style="background-color: red; width: 30%; height: 30%;">
        </div>
        <div class="mx-3 text-center align-self-end" style="width: 30%; height: 30%;">
            <a id="reset" href="/" class="text-black">RESET ALL</a>
            <button type="button" id="btn-done" class="btn btn-secondary justify-content-center" data-toggle="modal" data-target="#exampleModal">
                Done
            </button>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="picture-priview-modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="container photo-container">
                    <div class="row">
                        <div id="preview-img1" class="pick-option col">
                        </div>
                        <div id="preview-img2" class="pick-option col">
                        </div>
                    </div>

                    <div class="row" style="height:24px;"></div>

                    <div class="row">
                        <div id="preview-img3" class="pick-option col">
                        </div>
                        <div id="preview-img4" class="pick-option col">
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-white" id="btn-goBack" data-bs-dismiss="modal">Go Back</button>
                <button type="button" id="btn-confirm" class="btn-purple">Confirm</button>
            </div>
        </div>
    </div>

<script src="~/lib/webcam/webcam.js"></script>
<script type="text/javascript">
    const variables = {
        CameraManufacturer: '@Model.CameraManufacturer',
    };

    const windowInnerWidth = window.innerWidth;
    const windowInnerHeight = window.innerHeight;

    document.addEventListener('DOMContentLoaded', async () => {
        navigator.mediaDevices?.enumerateDevices()
            .then(devices => {
                let webcamOption = null;

                for (let i = 0; i < devices.length; i++) {
                    const device = devices[i];

                    if (device?.kind !== 'videoinput') {
                        continue;
                    }

                    if (device.label?.toLowerCase()?.includes(variables.CameraManufacturer) || !webcamOption) {
                        webcamOption = {
                            width: windowInnerWidth,
                            height: windowInnerHeight,
                            image_format: 'jpeg',
                            jpeg_quality: 100,
                            deviceId: { exact: device.deviceId, },
                            flip_horiz: true,

                            // device capture size
                            dest_width: windowInnerWidth / 2,
                            dest_height: windowInnerHeight / 2,
                        };
                    }
                };

                Webcam.set(webcamOption);
                Webcam.attach('#camera-preview');
            })
            .catch(err => {
                console.log(err);
            });

        const totalCount = 8;
        const counter = document.querySelector('#camera-counter');
        const timerSpan = $("#camera-timer");
        const pictureUriList = [];

        const renderPictures = () => {
            document.querySelector('#take-picture-area').classList.add('d-none');

            const pictureList = document.querySelector('#picture-list-area');

            for (let i = 0; i < pictureUriList.length; i++) {
                const pictureUri = pictureUriList[i];

                document.querySelector(`#img${i + 1}`).innerHTML = `
                    <img src="${pictureUri}" style="max-width: 100%;" />
                `;
            }

            pictureList.classList.remove('d-none');
        }

        let current = 1;

        // 사진 찍기 타이머 
        const initTimer = () => {
            let seconds;
            let timer = 6;
            let interval = setInterval(() => {
                seconds = timer;

                let cameraEmojispan = $('<span />').attr('class', 'emoji camera').html('');

                timerSpan.empty().append(timer === 6 ? 'Ready?' :
                    timer === 0 ? cameraEmojispan :
                    seconds + '!');

                if (--timer < 0) {
                    current++;

                    counter.innerText = `${current}/${totalCount}`;

                    Webcam.snap((uri) => {
                        pictureUriList.push(uri);
                    });

                    clearInterval(interval);

                    if (current >= totalCount) {
                        renderPictures();
                        initPickPhotoimer(80); // 80초 타이머 시작 
                    } else {
                        initTimer();
                    }
                }
            }, 1_000);
        }

        initTimer();

        // 사진 선택 타이머

        // 타이머 시작
        var pickPhototimer;
        const initPickPhotoimer = (time) => {
            console.log('pickPhototimer - ', pickPhototimer);
            if (pickPhototimer != undefined) {
                clearInterval(pickPhototimer);
            }

            pickPhototimer = setInterval(() => {
                console.log(time);
                $("#timer").text(time);
                time--;

                if (time < 0) {
                    clearInterval(timer);
                    // 시간 초과 이후 동작 
                }

            }, 1000);
        }

        // 사진 선택하기
        const options = document.querySelectorAll('.pick-option');

        const checkOptions = () => {
            const selectedOptions = document.querySelector('.pick-option.selected');

        };

        options.forEach(option => {
            option.addEventListener('click', () => {
                option.classList.toggle('selected');

                checkOptions();
            });
        });


        // 테스트 용도로 마우스 클릭시마다 사진 찍히도록 추가함.
        document.addEventListener('click', (event) => {
            if (current < totalCount) {
                current++;

                counter.innerText = `${current}/${totalCount}`;

                Webcam.snap((uri) => {
                    pictureUriList.push(uri);
                });

                if (current >= totalCount) {
                    renderPictures();
                }
            }
        });

        const btnDone = document.querySelector('#btn-done');

        btnDone.addEventListener('click', () => {
            const selectedOptions = document.querySelectorAll('.pick-option.selected');

            if (selectedOptions.length < 4) {
                alert('4개의 사진을 선택해주세요');
                return;
            }

            for (let i = 0; i < 4; i++) {
                const previewUri = selectedOptions[i];
                let pickImgSrc = selectedOptions[i].querySelector('img').src;

                document.querySelector(`#preview-img${i + 1}`).innerHTML = `
                    <img src="${pickImgSrc}" style="max-width: 100%;" />
                `;
            }

            $('#picture-priview-modal').modal('show');
        });

        const btnConfirm = document.querySelector('#btn-confirm');
        btnConfirm.addEventListener('click', () => {
            console.log('btnConfirm');
            localStorage.setItem("image1_src", $("#preview-img1 img")[0].src);
            localStorage.setItem("image2_src", $("#preview-img2 img")[0].src);
            localStorage.setItem("image3_src", $("#preview-img3 img")[0].src);
            localStorage.setItem("image4_src", $("#preview-img4 img")[0].src);

            window.location.href = `/select-page`;
        });

        const btnGoBack = document.querySelector('#btn-goBack');
        btnGoBack.addEventListener('click', () => {
            initPickPhotoimer(40);
        });
    });
</script>
